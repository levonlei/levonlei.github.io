<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>golang_...</title>
    <link href="/2022/08/21/golang/"/>
    <url>/2022/08/21/golang/</url>
    
    <content type="html"><![CDATA[<h1 id="go语言-…的用法"><a href="#go语言-…的用法" class="headerlink" title=" go语言 …的用法"></a><center> go语言 …的用法</h1><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="#menuIndex1">背景</a></li><li><a href="#menuIndex2">用法一：不定参传入</a></li><li><a href="#menuIndex3">用法二：切片打散成单个字符串</a></li></ul><h3 id="menuIndex1">背景</h3>初次看go的代码的时候发现很多...的代码使用，好奇这是什么用法。<h3 id="menuIndex2">用法一：不定参传入</h3>第一个用法主要是用于函数有多个不定参数的情况，表示为可变参数，可以接受任意个数但相同类型的参数。比如下面的例子：PrintString函数能接受任意个string参数，然后把它打印出来<pre class="prettyprint linenums"><code><span class="pln">func PrintString(args ...string) &#123;     for _, s:= range args&#123;        fmt.Println(s)    &#125;&#125;</span></code></pre><h3 id="menuIndex3">用法二：切片打散成单个字符串</h3>假设我们定义了一个切片，我们现在需要调用PrintString函数,把切片中的每一个字符串都输出出来，假如没有...语法糖，我们就需要遍历了，但是有了...之后，我们只需要按照下面的示例书写即可<pre class="prettyprint linenums"><code><span class="pln">func main()&#123;var EnumString = []string&#123;        "levon",        "lei",        "kind",        "man",    &#125;    PrintString(EnumString...) //切片被当成多个单字符串传入&#125;</span></code></pre>输出结果<pre class="prettyprint linenums"><code><span class="pln">levonleikindman</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>struct_tools</title>
    <link href="/2022/08/17/struct-tools/"/>
    <url>/2022/08/17/struct-tools/</url>
    
    <content type="html"><![CDATA[<h1 id="常用的golang-struct结构体工具"><a href="#常用的golang-struct结构体工具" class="headerlink" title=" 常用的golang struct结构体工具"></a><center> 常用的golang struct结构体工具</h1><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="#menuIndex1">背景</a></li><li><a href="#menuIndex2">用法一：json to go</a></li><li><a href="#menuIndex3">用法二：yaml to go</a></li><li><a href="#menuIndex4">用法三：json to proto</a></li><li><a href="#menuIndex5">用法三：sql to go </a></li></ul><h3 id="menuIndex1">背景</h3>写go代码的时候，经常遇到读取yaml文件，调用第三方库等场景。前期自己写数据结构，后面发现自己傻了，有现成的，输入后就出现自己想要的，简直不要太爽。<h3 id="menuIndex2">json to go</h3>json数据生成go结构体<pre class="prettyprint linenums"><code><span  id="jump" class="pln">https://mholt.github.io/json-to-go/</span></code></pre><h3 id="menuIndex3">yaml to go</h3>yaml数据生成结构体<pre class="prettyprint linenums"><code><span  id="jump" class="pln">https://zhwt.github.io/yaml-to-go/</span></code></pre><h3 id="menuIndex4">json to proto</h3>json数据生成proto结构<pre class="prettyprint linenums"><code><span  id="jump" class="pln">https://json-to-proto.github.io/</span></code></pre><h3 id="menuIndex5">sql to go</h3>sql数据生成go结构体（非常好用，可以直接支持gorm使用）<pre class="prettyprint linenums"><code><span  id="jump" class="pln">https://www.qetool.com/sql_json_go/sql.html</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>golang中下划线_的用法</title>
    <link href="/2022/08/14/underline_use/"/>
    <url>/2022/08/14/underline_use/</url>
    
    <content type="html"><![CDATA[<h1 id="golang中下划线-的用法"><a href="#golang中下划线-的用法" class="headerlink" title=" golang中下划线_的用法"></a><center> golang中下划线_的用法</h1><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="#menuIndex1">背景</a></li><li><a href="#menuIndex2">用法一：类型断言</a></li><li><a href="#menuIndex3">用法二：忽略返回值</a></li><li><a href="#menuIndex4">用法三：引入包</a></li></ul><h3 id="menuIndex1">背景</h3>在看很多源码的时候会出现下划线的用法，尤其是用在接口与结构体之间进行断言，kubernets，kuberbuilder之中都存在。自己总结了一下，下划线的用法，记录下来。<h3 id="menuIndex2">用法一：类型断言</h3>假设我们定义了interface<pre class="prettyprint linenums"><code><span class="pln">type Foo interface &#123;     Say()&#125;</span></code></pre>定义struct<pre class="prettyprint linenums"><code><span class="pln">type Dog struct &#123;&#125;</span></code></pre>后我们希望在代码中判断Dog这个struct是否实现了Foo这个interface，就可以如下这么写。<pre class="prettyprint linenums"><code><span class="pln">var _ Foo = Dog&#123;&#125; &#123;&#125;</span></code></pre>假设没有实现的话，ide会波浪线标识以及告诉你哪个没实现，再者编译的时候会直接报错。可以很好的帮助我们编程时候发现错误<h3 id="menuIndex3">用法二：忽略返回值</h3>假设一个函数定义了多个变量，我们只需要其中一个，其他的不要用到，就可以这么使用。这是下划线在go中最常见的用法了。<pre class="prettyprint linenums"><code><span class="pln">v1, _ := func(...) &#123;&#125;</span></code></pre><h3 id="menuIndex4">用法三：引入包</h3>假设我们在代码的import中这样引入package：<pre class="prettyprint linenums"><code><span class="pln">import _ "test/foo" &#123;&#125;</span></code></pre>这表示呢在执行本段代码之前会先调用test/foo中的初始化函数(init)，这种使用方式仅让导入的包做初始化，而不使用包中其他功能。适用于本包文件的运行，必须执行某个包的init函数，避免panic问题]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
